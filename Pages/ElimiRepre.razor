@page "/ElimiRepre"  
@using System.Collections.Generic  
@using System.Text.Json  
@using FrontBlazor.Services  
@inject ServicioEntidad servicioEntidad  
@inject NavigationManager navegacionManager  

<PageTitle>Eliminar Representación</PageTitle>

<h3>Lista de Representación</h3>

@if (sentidos is null)
{
    <p>Cargando...</p>
}
else if (sentidos.Count == 0)
{
    <p>No hay registros.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentido in sentidos)
            {
                <tr>
                    <td>@sentido["id"]</td>
                    <td>@sentido["nombre"]</td>
                    <td>
                        <button class="btn btn-warning" @onclick="@( () => EditarSentido(ObtenerId(sentido)) )">Editar</button>
                        <button class="btn btn-danger" @onclick="@( async () => await EliminarSentido(ObtenerId(sentido)) )">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="CrearSentido">Agregar Representación</button>

@code {
    private List<Dictionary<string, object>>? sentidos;

    protected override async Task OnInitializedAsync()
    {
        sentidos = await servicioEntidad.ObtenerTodosAsync("proyecto", "represenvisual");
    }

    private void CrearSentido()
    {
        navegacionManager.NavigateTo("/CrearRepre");
    }

    private void EditarSentido(string id)
    {
        navegacionManager.NavigateTo($"/EditarRepre/{id}");
    }

    private async Task EliminarSentido(string id)
    {
        bool confirmado = await servicioEntidad.EliminarAsync("proyecto", "represenvisual", "id", id);
        if (confirmado)
        {
            sentidos = await servicioEntidad.ObtenerTodosAsync("proyecto", "represenvisual");
            StateHasChanged();
        }
    }

    private string ObtenerId(Dictionary<string, object> sentido)
{
    if (sentido.TryGetValue("id", out var idValor) && idValor != null)
    {
        return idValor.ToString() ?? "";
    }
    return ""; // Retorna cadena vacía si no encuentra el id
}
}